// Code generated by MockGen. DO NOT EDIT.
// Source: chat-bots-api/internal/repository (interfaces: SSORepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sso "github.com/ilborsch/sso-proto/gen/go/sso"
)

// MockSSORepository is a mock of SSORepository interface.
type MockSSORepository struct {
	ctrl     *gomock.Controller
	recorder *MockSSORepositoryMockRecorder
}

// MockSSORepositoryMockRecorder is the mock recorder for MockSSORepository.
type MockSSORepositoryMockRecorder struct {
	mock *MockSSORepository
}

// NewMockSSORepository creates a new mock instance.
func NewMockSSORepository(ctrl *gomock.Controller) *MockSSORepository {
	mock := &MockSSORepository{ctrl: ctrl}
	mock.recorder = &MockSSORepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSORepository) EXPECT() *MockSSORepositoryMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method.
func (m *MockSSORepository) IsAdmin(arg0 context.Context, arg1 *sso.IsAdminRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockSSORepositoryMockRecorder) IsAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockSSORepository)(nil).IsAdmin), arg0, arg1)
}

// Login mocks base method.
func (m *MockSSORepository) Login(arg0 context.Context, arg1 *sso.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSSORepositoryMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSSORepository)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockSSORepository) Register(arg0 context.Context, arg1 *sso.RegisterRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSSORepositoryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSSORepository)(nil).Register), arg0, arg1)
}
