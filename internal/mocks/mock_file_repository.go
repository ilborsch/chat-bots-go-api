// Code generated by MockGen. DO NOT EDIT.
// Source: chat-bots-api/internal/repository (interfaces: FileRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "chat-bots-api/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// ChatBotFiles mocks base method.
func (m *MockFileRepository) ChatBotFiles(arg0 context.Context, arg1, arg2 int64) ([]domain.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatBotFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatBotFiles indicates an expected call of ChatBotFiles.
func (mr *MockFileRepositoryMockRecorder) ChatBotFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatBotFiles", reflect.TypeOf((*MockFileRepository)(nil).ChatBotFiles), arg0, arg1, arg2)
}

// File mocks base method.
func (m *MockFileRepository) File(arg0 context.Context, arg1, arg2 int64) (domain.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File.
func (mr *MockFileRepositoryMockRecorder) File(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockFileRepository)(nil).File), arg0, arg1, arg2)
}

// RemoveFile mocks base method.
func (m *MockFileRepository) RemoveFile(arg0 context.Context, arg1 int64, arg2 int, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockFileRepositoryMockRecorder) RemoveFile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockFileRepository)(nil).RemoveFile), arg0, arg1, arg2, arg3)
}

// SaveFile mocks base method.
func (m *MockFileRepository) SaveFile(arg0 context.Context, arg1 domain.File, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileRepositoryMockRecorder) SaveFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileRepository)(nil).SaveFile), arg0, arg1, arg2)
}
